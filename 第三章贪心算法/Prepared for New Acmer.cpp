/*************************************************************************************************************************************************
Problem Description
集训进行了将近2个礼拜，这段时间以恢复性训练为主，我一直在密切关注大家的训练情况，
目前为止，对大家的表现相当满意，首先是绝大部分队员的训练积极性很高，
其次，都很遵守集训纪律，最后，老队员也起到了很好的带头作用，这里特别感谢为这次DP专题练习赛提供题目和测试数据的集训队队长xhd同学.
特别高兴的是，跟随集训队训练的一批新队员表现非常好，进步也比较显著，特别是训练态度大大超出我的预期，我敢说，如果各位能如此坚持下去，绝对前途无量！
考虑到新队员还没有经过系统训练，我这里特别添加一道简单题：
给定三个正整数A，B和C（A,B,C<=1000000），求A^B mod C的结果.
希望各位都能体会到比赛中AC的快乐，绝对的量身定制，很高的待遇哟，呵呵...
Input
输入数据首先包含一个正整数N,表示测试实例的个数，然后是N行数据，每行包括三个正整数A,B,C。
Output
对每个测试实例请输出计算后的结果，每个实例的输出占一行。
Sample Input
3
2 3 4
3 3 5
4 4 6
Sample Output
0
2
4
******************************************************************************************************************************************************/ 
//简单题，用快速幂做。要注意用int存储时会溢出，因为最坏会存在10的6次方*10的6次方等于10的12次方的情况，超过int的范围。用long long做即可 
#include <iostream>
using namespace std;

long long myPow(long long base, long long index, long long c)	//快速幂 
{
	long long result = 1;
	base %= c;
	while(index > 0)
	{
		if(index % 2)
		{
			result *= base % c;
			result %= c;
		}
		
		index /= 2;
		base *= base % c;
		base %= c;
	}
	return result;
}

int main()
{
	long long n, a, b ,c;
	cin >> n;
	for(int i = 0; i < n; i++)	
	{
		cin >> a >> b >> c;
		cout << myPow(a, b, c) << endl;
	}
	
	return 0;
} 
